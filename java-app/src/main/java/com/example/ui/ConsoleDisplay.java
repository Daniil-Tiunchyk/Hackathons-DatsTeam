package com.example.ui;

import com.example.domain.UnitType;
import com.example.dto.ArenaStateDto;
import com.example.dto.MoveCommandDto;
import com.example.dto.RegistrationResponseDto;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π —Å–≤–æ–¥–∫–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
 * –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤ –≤–∏–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞.
 */
public class ConsoleDisplay {

    /**
     * –ù–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞.
     */
    private record TurnStatistics(
            long workers, long fighters, long scouts, long totalAnts,
            long enemies,
            long returningHome, long movingToTarget, long idle,
            long totalFoodCarried
    ) {
    }

    public void render(ArenaStateDto state, List<MoveCommandDto> plannedMoves) {
        clearConsole();

        TurnStatistics stats = aggregateStatistics(state, plannedMoves);

        String output = """
                =======================================================
                | üïπÔ∏è –ö–ª–∏–µ–Ω—Ç DatsPulse | –•–æ–¥: %-5d | –°—á–µ—Ç: %-7d |
                =======================================================
                –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: %.2f —Å–µ–∫.
                -------------------------------------------------------
                
                --[ üìä –°–∏–ª—ã –Ω–∞ –∫–∞—Ä—Ç–µ ]--
                –ù–∞—à–∏ —é–Ω–∏—Ç—ã : üêú %-2d (–†:%-2d, –ë:%-2d, –†–∑:%-2d)
                –í—Ä–∞–≥–∏      : üíÄ %-2d (–≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
                
                --[ üéØ –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ ]--
                [üè†] –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: %-2d (–Ω–µ—Å—É—Ç %d –µ–¥.)
                [üó∫Ô∏è] –î–≤–∏–∂—É—Ç—Å—è –∫ —Ü–µ–ª–∏        : %-2d
                [üí§] –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏–∫–∞–∑–∞        : %-2d
                
                =======================================================
                """.formatted(
                state.turnNo(),
                state.score(),
                state.nextTurnIn(),
                stats.totalAnts(),
                stats.workers(), stats.fighters(), stats.scouts(),
                stats.enemies(),
                stats.returningHome(), stats.totalFoodCarried(),
                stats.movingToTarget(),
                stats.idle()
        );

        System.out.println(output);
    }

    /**
     * –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –≤—Å—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã.
     */
    private TurnStatistics aggregateStatistics(ArenaStateDto state, List<MoveCommandDto> plannedMoves) {
        Map<UnitType, Long> countsByType = state.ants().stream()
                .collect(Collectors.groupingBy(ant -> UnitType.fromApiId(ant.type()), Collectors.counting()));

        Set<String> antsWithMoves = plannedMoves.stream()
                .map(MoveCommandDto::ant)
                .collect(Collectors.toSet());

        long returningHome = 0;
        long movingToTarget = 0;
        long totalFoodCarried = 0;

        for (ArenaStateDto.AntDto ant : state.ants()) {
            if (antsWithMoves.contains(ant.id())) {
                if (ant.food() != null && ant.food().amount() > 0) {
                    returningHome++;
                    totalFoodCarried += ant.food().amount();
                } else {
                    movingToTarget++;
                }
            }
        }

        long totalAnts = state.ants().size();
        long idle = totalAnts - returningHome - movingToTarget;

        return new TurnStatistics(
                countsByType.getOrDefault(UnitType.WORKER, 0L),
                countsByType.getOrDefault(UnitType.FIGHTER, 0L),
                countsByType.getOrDefault(UnitType.SCOUT, 0L),
                totalAnts,
                state.enemies().size(),
                returningHome,
                movingToTarget,
                idle,
                totalFoodCarried
        );
    }

    public void showRegistrationAttempt() {
        clearConsole();
        String output = """
                =======================================================
                | ‚åõ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞                      |
                =======================================================
                –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞—É–Ω–¥–µ. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...
                """;
        System.out.println(output);
    }

    public void showRegistrationResult(RegistrationResponseDto response) {
        if (response != null && response.message() != null) {
            System.out.printf("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: [–ö–æ–¥: %d] %s%n", response.code(), response.message());
        } else {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
        System.out.println("-------------------------------------------------------");
    }

    /**
     * –û—á–∏—â–∞–µ—Ç —ç–∫—Ä–∞–Ω –∫–æ–Ω—Å–æ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
     * –∏ –¥–ª—è —ç–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏ –≤ IDE.
     */
    private void clearConsole() {
        try {
            if (System.console() == null) {
                // –ï—Å–ª–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏ –≤—ã–≤–æ–¥–∞ IDE (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ IntelliJ),
                // —ç—Ç–æ—Ç —Ç—Ä—é–∫ –¥–æ–±–∞–≤–∏—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏.
                System.out.println("\n".repeat(5));
            } else {
                // –ï—Å–ª–∏ –º—ã –≤ –Ω–∞—Å—Ç–æ—è—â–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
                if (System.getProperty("os.name").contains("Windows")) {
                    new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                } else {
                    System.out.print("\033[H\033[2J");
                    System.out.flush();
                }
            }
        } catch (IOException | InterruptedException ignored) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω–∞—è –¥–ª—è –ª–æ–≥–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏—è.
        }
    }
}
