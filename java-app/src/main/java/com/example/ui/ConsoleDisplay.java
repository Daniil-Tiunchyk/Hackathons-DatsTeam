package com.example.ui;

import com.example.domain.UnitType;
import com.example.dto.ArenaStateDto;
import com.example.dto.MoveCommandDto;
import com.example.dto.RegistrationResponseDto;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π —Å–≤–æ–¥–∫–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
 * –≤ –∫–æ–Ω—Å–æ–ª–∏, –≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
 */
public class ConsoleDisplay {

    private record TurnStatistics(
            long workers, long fighters, long scouts, long totalAnts,
            long enemies,
            long returningHome, long movingToTarget, long idle,
            long totalFoodCarried
    ) {}

    /**
     * –í—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ "—Å—ã—Ä–æ–≥–æ" —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç API
     * –∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ MapStateService.
     * –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ª–æ–≥–∏–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∫–∞—Ä—Ç—ã.
     *
     * @param raw      "–°—ã—Ä–æ–π" DTO, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–∞–ø—Ä—è–º—É—é –æ—Ç API.
     * @param enriched –§–∏–Ω–∞–ª—å–Ω—ã–π DTO –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ MapStateService.
     */
    public void renderDebugComparison(ArenaStateDto raw, ArenaStateDto enriched) {
        if (raw == null || enriched == null) {
            System.out.println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –æ–¥–Ω–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π null.");
            return;
        }

        String header = String.format("======= –°–†–ê–í–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô (–•–û–î %d) =======%n", enriched.turnNo());
        String line =   "----------------------------------------------------------%n";
        String format = "| %-25s | %-12s | %-15s |%n";

        StringBuilder sb = new StringBuilder("\n");
        sb.append(header);
        sb.append(line);
        sb.append(String.format(format, "–ü–∞—Ä–∞–º–µ—Ç—Ä", "API (Raw)", "State (Enriched)"));
        sb.append(line);
        sb.append(String.format(format, "–ù–∞—à–∏ —é–Ω–∏—Ç—ã", raw.ants().size(), enriched.ants().size()));
        sb.append(String.format(format, "–í—Ä–∞–≥–∏ (–≤–∏–¥–∏–º—ã–µ)", raw.enemies().size(), enriched.enemies().size()));
        sb.append(String.format(format, "–ï–¥–∞ (–≤–∏–¥–∏–º–∞—è)", raw.food().size(), enriched.food().size()));
        sb.append(String.format(format, "–ì–µ–∫—Å—ã –∫–∞—Ä—Ç—ã (–≤ –æ—Ç–≤–µ—Ç–µ)", raw.map().size(), enriched.map().size()));
        sb.append(String.format(format, "–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã", "N/A", enriched.knownBoundaries().size()));
        sb.append(String.format(format, "–í–∏–¥–∏–º—ã–µ –≥–µ–∫—Å—ã (—Å–µ–π—á–∞—Å)", "N/A", enriched.currentlyVisibleHexes().size()));
        sb.append(line);

        System.out.print(sb);
    }

    public void render(ArenaStateDto state, List<MoveCommandDto> plannedMoves) {
        clearConsole();

        TurnStatistics stats = aggregateStatistics(state, plannedMoves);

        String output = """
                =======================================================
                | üïπÔ∏è –ö–ª–∏–µ–Ω—Ç DatsPulse | –•–æ–¥: %-5d | –°—á–µ—Ç: %-7d |
                =======================================================
                –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: %.2f —Å–µ–∫.
                -------------------------------------------------------
                
                --[ üìä –°–∏–ª—ã –Ω–∞ –∫–∞—Ä—Ç–µ ]--
                –ù–∞—à–∏ —é–Ω–∏—Ç—ã : üêú %-2d (–†:%-2d, –ë:%-2d, –†–∑:%-2d)
                –í—Ä–∞–≥–∏      : üíÄ %-2d (–≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏)
                
                --[ üéØ –¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ ]--
                [üè†] –í–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏: %-2d (–Ω–µ—Å—É—Ç %d –µ–¥.)
                [üó∫Ô∏è] –î–≤–∏–∂—É—Ç—Å—è –∫ —Ü–µ–ª–∏        : %-2d
                [üí§] –û–∂–∏–¥–∞—é—Ç –ø—Ä–∏–∫–∞–∑–∞        : %-2d
                
                =======================================================
                """.formatted(
                state.turnNo(),
                state.score(),
                state.nextTurnIn(),
                stats.totalAnts(),
                stats.workers(), stats.fighters(), stats.scouts(),
                stats.enemies(),
                stats.returningHome(), stats.totalFoodCarried(),
                stats.movingToTarget(),
                stats.idle()
        );

        System.out.println(output);
    }

    private TurnStatistics aggregateStatistics(ArenaStateDto state, List<MoveCommandDto> plannedMoves) {
        Map<UnitType, Long> countsByType = state.ants().stream()
                .collect(Collectors.groupingBy(ant -> UnitType.fromApiId(ant.type()), Collectors.counting()));

        Set<String> antsWithMoves = plannedMoves.stream()
                .map(MoveCommandDto::ant)
                .collect(Collectors.toSet());

        long returningHome = 0;
        long movingToTarget = 0;
        long totalFoodCarried = 0;

        for (ArenaStateDto.AntDto ant : state.ants()) {
            if (antsWithMoves.contains(ant.id())) {
                if (isCarryingFood(ant)) {
                    returningHome++;
                    totalFoodCarried += ant.food().amount();
                } else {
                    movingToTarget++;
                }
            }
        }

        long totalAnts = state.ants().size();
        long idle = totalAnts - returningHome - movingToTarget;

        return new TurnStatistics(
                countsByType.getOrDefault(UnitType.WORKER, 0L),
                countsByType.getOrDefault(UnitType.FIGHTER, 0L),
                countsByType.getOrDefault(UnitType.SCOUT, 0L),
                totalAnts,
                state.enemies().size(),
                returningHome,
                movingToTarget,
                idle,
                totalFoodCarried
        );
    }

    private boolean isCarryingFood(ArenaStateDto.AntDto ant) {
        return ant.food() != null && ant.food().amount() > 0;
    }

    public void showRegistrationAttempt() {
        clearConsole();
        String output = """
                =======================================================
                | ‚åõ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞                      |
                =======================================================
                –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞—É–Ω–¥–µ. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...
                """;
        System.out.println(output);
    }

    public void showRegistrationResult(RegistrationResponseDto response) {
        if (response != null && response.message() != null) {
            System.out.printf("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: [–ö–æ–¥: %d] %s%n", response.code(), response.message());
        } else {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
        System.out.println("-------------------------------------------------------");
    }

    private void clearConsole() {
        try {
            if (System.console() == null) {
                // –í —Å—Ä–µ–¥–∞—Ö –±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ IDE) –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
                System.out.println("\n".repeat(20));
            } else {
                if (System.getProperty("os.name").contains("Windows")) {
                    new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                } else {
                    System.out.print("\033[H\033[2J");
                    System.out.flush();
                }
            }
        } catch (IOException | InterruptedException ignored) {
            Thread.currentThread().interrupt();
        }
    }
}
