package com.example.ui;

import com.example.domain.Hex;
import com.example.domain.UnitType;
import com.example.dto.ArenaStateDto;
import com.example.dto.MoveCommandDto;
import com.example.dto.RegistrationResponseDto;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫—É –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∏ –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π —Å–≤–æ–¥–∫–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
 * –≤ –∫–æ–Ω—Å–æ–ª–∏, –≤–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω–æ–π –¥–∞—à–±–æ—Ä–¥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
 */
public class ConsoleDisplay {

    private static final double WORKER_FULL_CAPACITY_THRESHOLD = 0.7;

    /**
     * –ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ö–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
     */
    private record TurnStatistics(
            // –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            int turnNo, int teamScore, double nextTurnIn,
            // –°–≤–æ–¥–∫–∞ –ø–æ —é–Ω–∏—Ç–∞–º
            long totalAnts, long totalMoving, long totalIdle,
            long totalWorkers, long totalFighters, long totalScouts,
            // –°–≤–æ–¥–∫–∞ –ø–æ –≤—Ä–∞–≥–∞–º
            long visibleEnemies,
            // –°–≤–æ–¥–∫–∞ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ
            long totalCarriedFoodAmount,
            // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –∑–∞–¥–∞—á–∞–º —Ä–∞–±–æ—á–∏—Ö
            long workersReturningFull,
            long workersToppingOff,
            long workersCollecting,
            long workersExploring,
            long workersIdle
    ) {
    }

    public void renderDebugComparison(ArenaStateDto raw, ArenaStateDto enriched) {
        if (raw == null || enriched == null) {
            System.out.println("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –æ–¥–Ω–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π null.");
            return;
        }

        String header = String.format("======= –°–†–ê–í–ù–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ô (–•–û–î %d) =======\n", enriched.turnNo());
        String line = "----------------------------------------------------------\n";
        String format = "| %-25s | %-12s | %-15s |%n";

        String sb = "\n" + header +
                line +
                String.format(format, "–ü–∞—Ä–∞–º–µ—Ç—Ä", "API (Raw)", "State (Enriched)") +
                line +
                String.format(format, "–ù–∞—à–∏ —é–Ω–∏—Ç—ã", raw.ants().size(), enriched.ants().size()) +
                String.format(format, "–í—Ä–∞–≥–∏ (–≤–∏–¥–∏–º—ã–µ)", raw.enemies().size(), enriched.enemies().size()) +
                String.format(format, "–ï–¥–∞ (–≤–∏–¥–∏–º–∞—è)", raw.food().size(), enriched.food().size()) +
                String.format(format, "–ì–µ–∫—Å—ã –∫–∞—Ä—Ç—ã (–≤ –æ—Ç–≤–µ—Ç–µ)", raw.map().size(), enriched.map().size()) +
                String.format(format, "–ò–∑–≤–µ—Å—Ç–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã", "N/A", enriched.knownBoundaries().size()) +
                String.format(format, "–í–∏–¥–∏–º—ã–µ –≥–µ–∫—Å—ã (—Å–µ–π—á–∞—Å)", "N/A", enriched.currentlyVisibleHexes().size()) +
                line;

        System.out.print(sb);
    }

    public void render(ArenaStateDto state, List<MoveCommandDto> plannedMoves) {
        clearConsole();

        TurnStatistics stats = aggregateStatistics(state, plannedMoves);

        String output = """
                ================================================================
                | üïπÔ∏è –ö–ª–∏–µ–Ω—Ç DatsPulse | –•–æ–¥: %-5d | üåü –°—á–µ—Ç: %-8d |
                ================================================================
                –í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞: %.2f —Å–µ–∫.
                
                --[ üêú –ù–∞—à–∏ –Æ–Ω–∏—Ç—ã: %d | üèÉ –î–≤–∏–∂—É—Ç—Å—è: %d | üí§ –û–∂–∏–¥–∞—é—Ç: %d ]--
                - –†–∞–±–æ—á–∏–µ (%d):
                  [üè†] –ù–µ—Å—É—Ç –¥–æ–º–æ–π (–ø–æ–ª–Ω—ã–µ): %d
                  [üß∫] –î–æ–±–∏—Ä–∞—é—Ç —Ä–µ—Å—É—Ä—Å—ã:      %d
                  [üí∞] –ò–¥—É—Ç –∑–∞ –µ–¥–æ–π:          %d
                  [üó∫Ô∏è] –ò—Å—Å–ª–µ–¥—É—é—Ç:             %d
                - –ë–æ–π—Ü—ã (%d) / –†–∞–∑–≤–µ–¥—á–∏–∫–∏ (%d)
                
                --[ üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞ –∏ –†–∞–∑–≤–µ–¥–∫–∞ ]--
                –†–µ—Å—É—Ä—Å–æ–≤ –≤ –ø—É—Ç–∏: %d
                –í—Ä–∞–≥–æ–≤ –≤ –∑–æ–Ω–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏: %d
                ----------------------------------------------------------------
                """.formatted(
                stats.turnNo(), stats.teamScore(), stats.nextTurnIn(),
                stats.totalAnts(), stats.totalMoving(), stats.totalIdle(),
                stats.totalWorkers(),
                stats.workersReturningFull(),
                stats.workersToppingOff(),
                stats.workersCollecting(),
                stats.workersExploring(),
                stats.totalFighters(), stats.totalScouts(),
                stats.totalCarriedFoodAmount(),
                stats.visibleEnemies()
        );

        System.out.println(output);
    }

    private TurnStatistics aggregateStatistics(ArenaStateDto state, List<MoveCommandDto> plannedMoves) {
        Map<String, MoveCommandDto> movesById = plannedMoves.stream()
                .collect(Collectors.toMap(MoveCommandDto::ant, move -> move));

        Set<Hex> foodHexes = state.food().stream()
                .map(f -> new Hex(f.q(), f.r()))
                .collect(Collectors.toSet());

        long totalWorkers = 0, totalFighters = 0, totalScouts = 0;
        long workersReturningFull = 0, workersToppingOff = 0, workersCollecting = 0, workersExploring = 0, workersIdle = 0;
        long totalCarriedFoodAmount = 0;

        for (ArenaStateDto.AntDto ant : state.ants()) {
            UnitType type = UnitType.fromApiId(ant.type());
            boolean hasMove = movesById.containsKey(ant.id());

            if (isCarryingFood(ant)) {
                totalCarriedFoodAmount += ant.food().amount();
            }

            switch (type) {
                case WORKER -> {
                    totalWorkers++;
                    if (isCarryingFood(ant)) {
                        double capacity = type.getCapacity();
                        if (ant.food().amount() / capacity >= WORKER_FULL_CAPACITY_THRESHOLD) {
                            workersReturningFull++;
                        } else {
                            workersToppingOff++;
                        }
                    } else if (hasMove) {
                        Hex targetHex = movesById.get(ant.id()).path().getLast();
                        if (foodHexes.contains(targetHex)) {
                            workersCollecting++;
                        } else {
                            workersExploring++;
                        }
                    } else {
                        workersIdle++;
                    }
                }
                case FIGHTER -> totalFighters++;
                case SCOUT -> totalScouts++;
            }
        }

        long totalAnts = state.ants().size();
        long totalMoving = movesById.size();
        long totalIdle = totalAnts - totalMoving;

        return new TurnStatistics(
                state.turnNo(), state.score(), state.nextTurnIn(),
                totalAnts, totalMoving, totalIdle,
                totalWorkers, totalFighters, totalScouts,
                state.enemies().size(),
                totalCarriedFoodAmount,
                workersReturningFull,
                workersToppingOff,
                workersCollecting,
                workersExploring,
                workersIdle
        );
    }

    private boolean isCarryingFood(ArenaStateDto.AntDto ant) {
        return ant.food() != null && ant.food().amount() > 0;
    }

    public void showRegistrationAttempt() {
        clearConsole();
        String output = """
                =======================================================
                | ‚åõ –°–æ—Å—Ç–æ—è–Ω–∏–µ: –û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞—É–Ω–¥–∞                      |
                =======================================================
                –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞—É–Ω–¥–µ. –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...
                """;
        System.out.println(output);
    }

    public void showRegistrationResult(RegistrationResponseDto response) {
        if (response != null && response.message() != null) {
            System.out.printf("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: [–ö–æ–¥: %d] %s\n", response.code(), response.message());
        } else {
            System.out.println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.");
        }
        System.out.println("-------------------------------------------------------");
    }

    private void clearConsole() {
        try {
            if (System.console() == null) {
                System.out.println("\n".repeat(20));
            } else {
                if (System.getProperty("os.name").contains("Windows")) {
                    new ProcessBuilder("cmd", "/c", "cls").inheritIO().start().waitFor();
                } else {
                    System.out.print("\033[H\033[2J");
                    System.out.flush();
                }
            }
        } catch (IOException | InterruptedException ignored) {
            Thread.currentThread().interrupt();
        }
    }
}
